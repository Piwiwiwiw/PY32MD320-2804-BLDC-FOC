#ifndef TRIG_Q15_FUNC_H
#define TRIG_Q15_FUNC_H

#include <stdint.h> 

// --- Q15 ???? (512???) ---
#define TABLE_SIZE_QUARTER  129     // 0??90???129?? (0..128)
#define Q15_BITS            15      // ??????
#define Q14_BITS 						14
#define Q13_BITS            13
#define Q8_BITS              8
// ???????
#define QUADRANT_SAMPLES    128     // 90????
#define QUADRANT_MASK       0x7F    // 127 = 0b01111111
#define Q15_half 						16384
#define Q14_half 						8192
#define Q13_half 						4096
#define Q8_half							128
#define Q15_half_SQRT3      28378
#define Q14_SQRT3      			28378
#define Q15_P577						18900

// --- ????? ---
// ??? 0?90?? Q15 sin ??

typedef int16_t  Q15; 


extern const int16_t sin_q15_table_512[TABLE_SIZE_QUARTER];


/**
 * @brief ??? Q15 ???
 * * ?????????? Q15 ????,???????
 * C99/GNU C ? static inline ??????????,???????
 * * @param a Q15 ?????
 * @param b Q15 ?????
 * @return int16_t Q15 ????? (????)
 */
static inline int16_t Q15_Multiply(int16_t a, int16_t b) {
    // ????? Q30 ???
    // + (Q_SCALE / 2) ???????
    return (int16_t)(((int32_t)a * (int32_t)b + (Q15_half)) >> Q15_BITS);
}




static inline int16_t Q14_Multiply(int16_t a, int16_t b) {
    // ????? Q30 ???
    // + (Q_SCALE / 2) ???????
    return (int16_t)(((int32_t)a * (int32_t)b + (Q14_half)) >> Q14_BITS);
}


static inline int16_t Q13_Multiply(int16_t a, int16_t b) {
    // ????? Q30 ???
    // + (Q_SCALE / 2) ???????
    return (int16_t)(((int32_t)a * (int32_t)b + (Q13_half)) >> Q13_BITS);
}


static inline int16_t Q8_Multiply(int16_t a, int16_t b) {
    // ????? Q30 ???
    // + (Q_SCALE / 2) ???????
    return (int16_t)(((int32_t)a * (int32_t)b + (Q8_half)) >> Q8_BITS);
}
/**
 * @brief ? 14? uint ??????? Q15 sin ??
 * * ??????,??? 14??????????????????
 * * @param raw_angle ????? 0-16383 ?,?? 0-360?
 * @return int16_t ??? Q15 ?? sin ?
 */
static inline int16_t fast_sin_q15_raw(uint16_t raw_angle) {
	
		uint16_t total_index = raw_angle & 0x1FF; 
    uint8_t quadrant = total_index >> 7; 
    uint16_t index = raw_angle & 0x7F; // ????? 0..127
    // 3. ?????? (0 ? 127)
    // ????? 7 ?? total_index >> 2 ?? 9????? 2? (512 -> 128)
    // ?:? 4???????? 1?????

    int16_t q15_sign = 1;
    const uint16_t Q_SIZE = 128; 

    // 4. ?????????????
    if (quadrant == 0) {
        // 0-90?:????
    } else if (quadrant == 1) {
        // 90-180?:?? (127 - ??)
        index = Q_SIZE - 1 - index;
    } else if (quadrant == 2) {
        // 180-270?:????,??
        q15_sign = -1;
    } else { /* quadrant == 3 */
        // 270-360?:??,??
        index = Q_SIZE - 1 - index;
        q15_sign = -1;
    }
    // 5. ????
    int16_t result = sin_q15_table_512[index];

    // 6. ??????? Q15 ??
    return (int16_t)(result * q15_sign);
}


/**
 * @brief ? 14? uint ??????? Q15 cos ??
 * * ?? cos(x) = sin(90 - x) ??,?????? cos ??
 * 90??????: 16384 / 4 = 4096
 * * @param raw_angle ????? 0-16383 ?
 * @return int16_t ??? Q15 ?? cos ?
 */
static inline int16_t fast_cos_q15_raw(uint16_t raw_angle) {
    return fast_sin_q15_raw(640 - raw_angle);
}

#endif // TRIG_Q15_FUNC_H